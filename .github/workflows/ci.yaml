name: Continuous integration

on:
  push:
  pull_request:
    types: [ opened, reopened, synchronize ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    permissions:
      contents: write # tests create releases
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3.3.0
      - name: Set up Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # ratchet:actions/setup-go@v3.5.0
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Get dependencies
        run: make download

      - name: Lint
        run: |
          result="$(make  lint)"
          echo "$result"
          [ -n "$(echo "$result" | grep 'diff -u')" ] && exit 1 || exit 0

      - name: Build
        run: make build

      - name: Test
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: make test-race

      - name: Coverage
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: make coverage-out

      - name: Upload Code Coverage
        uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70 # ratchet:codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  release:
    name: release
    needs: [build]
    outputs:
      container_digest: ${{ steps.container_info.outputs.container_digest }}
      container_tags: ${{ steps.container_info.outputs.container_tags }}
      container_repos: ${{ steps.container_info.outputs.container_repos }}

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # ratchet:actions/setup-go@v3.5.0
        with:
          go-version-file: ./go.mod
          check-latest: true
          cache: true

      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # ratchet:sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v1.13.1'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@07978da4bdb4faa726e52dfc6b1bed63d4b56479 # ratchet:anchore/sbom-action/download-syft@v0.13.3
      - name: Login to Container registries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u philipssoftware --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ghcr.io

      - name: Set release variables
        id: release-vars
        run: |
          make release-vars > /tmp/spiffe-vault-release-vars.env
          source /tmp/spiffe-vault-release-vars.env
          if [[ -n "$LDFLAGS" ]]; then
            echo "::set-output name=LDFLAGS::$LDFLAGS"
          fi
          if [[ -n "$GIT_HASH" ]]; then
            echo "::set-output name=GIT_HASH::$GIT_HASH"
          fi
          rm -f /tmp/spiffe-vault-release-vars.env

      - name: Install signing key
        run: |
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key

      - name: Release ${{ (!startsWith(github.ref, 'refs/tags/') && 'snapshot') || '' }}
        uses: goreleaser/goreleaser-action@8f67e590f2d095516493f017008adc464e63adb1 # ratchet:goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --rm-dist ${{ (!startsWith(github.ref, 'refs/tags/') && '--snapshot') || '' }} ${{ ((startsWith(github.ref, 'refs/tags/') && endsWith(github.ref, '-draft')) && '-f .goreleaser.draft.yml') || '' }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          LDFLAGS: ${{ steps.release-vars.outputs.LDFLAGS }}
          GIT_HASH: ${{ steps.release-vars.outputs.GIT_HASH }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Get container info
        id: container_info
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export CONTAINER_DIGEST=$(make container-digest GITHUB_REF=${{ github.ref_name }})
          echo "::set-output name=container_digest::$CONTAINER_DIGEST"
          echo "::set-output name=container_tags::$(make container-tags CONTAINER_DIGEST="${CONTAINER_DIGEST}" | paste -s -d ',' -)"
          echo "::set-output name=container_repos::$(make container-repos CONTAINER_DIGEST="${CONTAINER_DIGEST}" | jq --raw-input . | jq --slurp -c)"

      - name: Logout from Container registries
        if: ${{ always() }}
        run: |
          docker logout
          docker logout ghcr.io

      - name: Cleanup signing keys
        if: ${{ always() }}
        run: rm -f cosign.key

  sbom:
    name: sbom
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    env:
      TAGS: "${{ needs.release.outputs.container_tags }}"

    strategy:
      matrix:
        repo: ${{ fromJSON(needs.release.outputs.container_repos) }}

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # ratchet:sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v1.13.1'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@07978da4bdb4faa726e52dfc6b1bed63d4b56479 # ratchet:anchore/sbom-action/download-syft@v0.13.3
      - name: Login to Container registries
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u philipssoftware --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ghcr.io

      - name: Attach SBOM
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo '${{ secrets.COSIGN_PUBLIC_KEY }}' > cosign.pub
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key
          IFS=,
          for t in ${TAGS}; do
            cosign verify --key cosign.pub ${{ matrix.repo }}:${t}
            syft ${{ matrix.repo }}:${t} -o spdx-json > sbom-spdx.json
            cosign attest --predicate sbom-spdx.json --type spdx --key cosign.key ${{ matrix.repo }}:${t}
            cosign verify-attestation -o verified-sbom-spdx.json --key cosign.pub ${{ matrix.repo }}:${t}
          done

      - name: Clean up & Logout from Container registries
        if: ${{ always() }}
        run: |
          docker logout
          docker logout ghcr.io
          rm -f cosign.key

  provenance:
    name: provenance
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04

    steps:
      - name: Generate provenance for Release
        uses: philips-labs/slsa-provenance-action@752766b8a3b1ebd09d599e163eeec8fa39e677aa # ratchet:philips-labs/slsa-provenance-action@v0.8.0
        with:
          command: generate
          subcommand: github-release
          arguments: --artifact-path release-assets --output-path provenance.att --tag-name ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # ratchet:sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v1.13.1'

      - name: Sign provenance
        run: |
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key
          cosign sign-blob --key cosign.key --output-signature "${SIGNATURE}" provenance.att
          cat "${SIGNATURE}"

          curl_args=(-s -H "Authorization: token ${GITHUB_TOKEN}")
          curl_args+=(-H "Accept: application/vnd.github.v3+json")
          release_id="$(curl "${curl_args[@]}" "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases?per_page=10" | jq "map(select(.name == \"${GITHUB_REF_NAME}\"))" | jq -r '.[0].id')"

          echo "Upload ${SIGNATURE} to release with id ${release_id}â€¦"
          curl_args+=(-H "Content-Type: $(file -b --mime-type "${SIGNATURE}")")
          curl "${curl_args[@]}" \
            --data-binary @"${SIGNATURE}" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}/assets?name=${SIGNATURE}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          SIGNATURE: provenance.att.sig

  container-provenance:
    name: container-provenance
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        repo: ${{ fromJSON(needs.release.outputs.container_repos) }}

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # ratchet:sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v1.13.1'

      - name: Generate provenance for ${{ matrix.repo }}
        uses: philips-labs/slsa-provenance-action@752766b8a3b1ebd09d599e163eeec8fa39e677aa # ratchet:philips-labs/slsa-provenance-action@v0.8.0
        with:
          command: generate
          subcommand: container
          arguments: --repository ${{ matrix.repo }} --output-path provenance.att --digest ${{ needs.release.outputs.container_digest }} --tags ${{ needs.release.outputs.container_tags }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get slsa-provenance predicate
        run: |
          cat provenance.att | jq .predicate > provenance-predicate.att

      - name: Login to Container registries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u philipssoftware --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ghcr.io

      - name: Attach provenance to image
        run: |
          echo '${{ secrets.COSIGN_PRIVATE_KEY }}' > cosign.key
          cosign attest --predicate provenance-predicate.att --type slsaprovenance --key cosign.key ${{ matrix.repo }}@${{ needs.release.outputs.container_digest }}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Verify attestation
        run: |
          echo '${{ secrets.COSIGN_PUBLIC_KEY }}' > cosign.pub
          cosign verify-attestation --key cosign.pub ${{ matrix.repo }}@${{ needs.release.outputs.container_digest }}

      - name: Logout from Container registries
        if: ${{ always() }}
        run: |
          docker logout
          docker logout ghcr.io
          rm -f cosign.key
